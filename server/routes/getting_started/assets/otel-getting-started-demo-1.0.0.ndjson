{"attributes":{"description":"A getting Started tutorial for OpenTelemetry Demo repository including running the services and ingesting telemetry into opensearch","kibanaSavedObjectMeta":{"searchSourceJSON":"{\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[]}"},"title":"Otel-Demo-Getting-Started","uiStateJSON":"{}","version":1,"visState":"{\"title\":\"Otel-Demo-Getting-Started\",\"type\":\"markdown\",\"aggs\":[],\"params\":{\"fontSize\":12,\"openLinksInNewTab\":false,\"markdown\":\"# Getting Started with OpenTelemetry Collector and Data Prepper for OpenSearch\\n\\nThis tutorial guides you through setting up OpenTelemetry Collector to export logs, traces, and metrics to Data Prepper, which then submits them into OpenSearch.\\nThis setup is essential for monitoring and observability in distributed systems, providing deep insights into application performance and behavior.\\n\\n## Purpose and Context\\n\\nThe goal is to create an environment where OpenTelemetry Collector captures data from a sample openTelemetry demo web-store application and forwards its telemetry info to Data Prepper.\\nData Prepper processes this data and sends it to OpenSearch for storage and analysis. \\n\\n## Prerequisites\\n\\n- Docker and Docker Compose installed on your machine.\\n- Basic knowledge of Docker and containerized applications.\\n- Access to the OpenSearch and OpenTelemetry repositories.\\n\\n## Workflow Overview\\n\\n1. **Setup OpenTelemetry Local Repository**: Clone the OpenTelemetry demo repository.\\n2. **Create Docker Network**: Establish a dedicated network for OpenSearch containers.\\n3. **Update Docker Environment File**: Configure environment variables for Docker Compose.\\n4. **Configure Data Prepper Pipelines**: Set up pipelines for logs, traces, metrics, and services.\\n5. **Configure OpenTelemetry Collector**: Integrate Data Prepper pipelines with the OpenTelemetry Collector.\\n6. **Run Docker Compose**: Start the Docker containers and validate the setup.\\n\\n## Steps\\n\\n### 1. Setup OpenTelemetry Local Repository\\n\\nClone the OpenTelemetry demo repository to your local machine.\\n\\n**Command:**\\n```sh\\ngit clone https://github.com/opensearch-project/opentelemetry-demo.git\\n```\\n\\n**Description:**\\nThis step sets up the OpenTelemetry demo repository locally, which contains all the necessary configuration files and resources.\\n\\n### 2. Create Docker Network\\n\\nCreate a Docker network named `opensearch-net` for the OpenSearch and Data Prepper containers to communicate.\\nUse this specific command if your existing `opensearch` & `opensearch-dashboards` are already running within a docker-compose container.\\n\\n**Command:**\\n```sh\\ndocker network create opensearch-net\\n```\\n\\n**Description:**\\nThis network ensures that all containers can communicate with each other within the same network.\\nIf `opensearch` & `opensearch-dashboards` are running outside of a container scope - for example in your localhost, change the original docker network definition \\n```yaml\\nnetworks:\\n    opensearch-otel-demo:\\n```\\nInto the following  \\n```yaml\\n  network_mode: host\\n```\\n\\n### 3. Update Docker Environment File\\n\\nDownload and update the Docker environment file with the necessary parameters.\\n\\n**Command:**\\n```sh\\nwget https://raw.githubusercontent.com/opensearch-project/opentelemetry-demo/main/.env\\n```\\n\\n**Description:**\\nThe `.env` file contains environment variables required for Docker Compose to configure the OpenSearch and Data Prepper containers.\\n\\nUpdate the following parameters:\\n```yaml\\n# OpenSearch Node1\\nOPENSEARCH_PORT=9200\\nOPENSEARCH_HOST=opensearch\\nOPENSEARCH_ADDR=${OPENSEARCH_HOST}:${OPENSEARCH_PORT}\\n\\n# OpenSearch Dashboard\\nOPENSEARCH_DASHBOARD_PORT=5601\\nOPENSEARCH_DASHBOARD_HOST=opensearch-dashboards\\nOPENSEARCH_DASHBOARD_ADDR=${OPENSEARCH_DASHBOARD_HOST}:${OPENSEARCH_DASHBOARD_PORT}\\n\\n```\\nIf running `opensearch` & `opensearch-dashboards` are running outside of a container scope -  also update the host names `OPENSEARCH_HOST`, `OPENSEARCH_DASHBOARD_HOST` appearing \\nin the `.env` file to be able to recognize your local running services.\\n\\n\\n### 4. Configure Data Prepper Pipelines\\n\\nConfigure the Data Prepper pipelines for logs, traces, metrics, and services.\\n\\n#### Logs Exporter\\nUpdate the pipelines.yaml:\\n\\n**Command:**\\n\\n```yaml\\notel-logs-pipeline:\\n  workers: 5\\n  delay: 10\\n  source:\\n    otel_logs_source:\\n      ssl: false\\n  buffer:\\n    bounded_blocking:\\n  sink:\\n    - opensearch:\\n        hosts: [\\\"https://opensearch-node1:9200\\\"]\\n        username: \\\"admin\\\"\\n        password: \\\"my_%New%_passW0rd!@#\\\"\\n        insecure: true\\n        index_type: custom\\n        index: otel-events-%{yyyy.MM.dd}\\n        bulk_size: 4\\n```\\n\\n#### Traces Exporter\\nUpdate the pipelines.yaml:\\n\\n**Command:**\\n```yaml\\nentry-pipeline:\\n  delay: \\\"100\\\"\\n  source:\\n    otel_trace_source:\\n      ssl: false\\n  sink:\\n    - pipeline:\\n        name: \\\"raw-pipeline\\\"\\n    - pipeline:\\n        name: \\\"service-map-pipeline\\\"\\nraw-pipeline:\\n  source:\\n    pipeline:\\n      name: \\\"entry-pipeline\\\"\\n  processor:\\n    - otel_trace_raw:\\n  sink:\\n    - opensearch:\\n        hosts: [\\\"https://opensearch-node1:9200\\\"]\\n        insecure: true\\n        username: \\\"admin\\\"\\n        password: \\\"my_%New%_passW0rd!@#\\\"\\n        index_type: trace-analytics-raw\\n```\\n\\n#### Metrics Exporter\\nUpdate the pipelines.yaml\\n\\n**Command:**\\n```yaml\\notel-metrics-pipeline:\\n  workers: 8\\n  delay: 3000\\n  source:\\n    otel_metrics_source:\\n      health_check_service: true\\n      ssl: false\\n  buffer:\\n    bounded_blocking:\\n      buffer_size: 1024\\n      batch_size: 1024\\n  processor:\\n    - otel_metrics:\\n        calculate_histogram_buckets: true\\n        calculate_exponential_histogram_buckets: true\\n        exponential_histogram_max_allowed_scale: 10\\n        flatten_attributes: false\\n  sink:\\n    - opensearch:\\n        hosts: [\\\"https://opensearch-node1:9200\\\"]\\n        username: \\\"admin\\\"\\n        password: \\\"my_%New%_passW0rd!@#\\\"\\n        insecure: true\\n        index_type: custom\\n        index: ss4o_metrics-otel-%{yyyy.MM.dd}\\n        bulk_size: 4\\n        template_type: index-template\\n```\\n\\n#### Services Exporter\\nUpdate the pipelines.yaml\\n\\n**Command:**\\n```yaml\\nservice-map-pipeline:\\n  delay: \\\"100\\\"\\n  source:\\n    pipeline:\\n      name: \\\"entry-pipeline\\\"\\n  processor:\\n    - service_map_stateful:\\n  sink:\\n    - opensearch:\\n        hosts: [\\\"https://opensearch-node1:9200\\\"]\\n        insecure: true\\n        username: \\\"admin\\\"\\n        password: \\\"my_%New%_passW0rd!@#\\\"\\n        index_type: trace-analytics-service-map\\n```\\n\\n### 5. Configure OpenTelemetry Collector\\n\\nIntegrate Data Prepper pipelines within the OpenTelemetry Collector configuration.\\n\\n#### Logs Services\\nUpdate the otelcol-config.yml:\\n\\n**Command:**\\n```yaml\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n      http:\\n\\nexporters:\\n  otlp/logs:\\n    endpoint: \\\"data-prepper:21892\\\"\\n    tls:\\n      insecure: true\\n      insecure_skip_verify: true \\n\\nservice:\\n  pipelines:\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp/logs, debug]\\n```\\n\\n#### Traces Services\\n\\n**Command:**\\nUpdate the otelcol-config.yml:\\n\\n```yaml\\n  otlp/traces:\\n    endpoint: \\\"data-prepper:21890\\\"\\n    tls:\\n      insecure: true\\n      insecure_skip_verify: true \\n\\nservice:\\n  pipelines:\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp, debug, spanmetrics, otlp/traces]\\n```\\n\\n#### Metrics Services\\nUpdate the otelcol-config.yml:\\n\\n**Command:**\\n```yaml\\n  otlp/metrics:\\n    endpoint: \\\"data-prepper:21891\\\"\\n    tls:\\n      insecure: true\\n      insecure_skip_verify: true \\n\\nservice:\\n  pipelines:\\n    metrics:\\n      receivers: [otlp, spanmetrics]\\n      processors: [filter/ottl, transform, batch]\\n      exporters: [otlphttp/prometheus, otlp/metrics, debug]\\n```\\n\\n### 6. Run Docker Compose\\n\\nStart the Docker containers and validate the setup.\\n\\n**Command:**\\n```sh\\ndocker-compose up -d --scale opensearch-node1=0 --scale opensearch-node2=0 --scale opensearch-dashboards=0\\n```\\n\\n**Description:**\\n\\nThis command starts the Docker containers for the OpenTelemetry Collector and Data Prepper, creating a live environment for data collection and analysis.\\n\\nThe `--scale opensearch-node1=0 --scale opensearch-node2=0 --scale opensearch-dashboards=0` command removes the opensearch & dashboard from being started in case they are already running.\\n\\n---\\n## Additional Info\\n - [Getting Started Info Document](https://github.com/opensearch-project/opensearch-catalog/blob/main/integrations/observability/otel-services/info/GettingStarted.md)\\n - [OpenTelemetry Demo repository](https://github.com/opensearch-project/opentelemetry-demo)\\n - [OTEL services Dashboard Installation Release](https://github.com/opensearch-project/opensearch-catalog/releases/tag/otel_services_dashboard-1.0.0)\\n - [OTEL Demo Architecture](https://github.com/opensearch-project/opensearch-catalog/blob/main/integrations/observability/otel-services/info/OTEL%20Demo%20Architecture.md)\"}}"},"id":"1afe2a50-3e38-11ef-a07c-d3f2df91ca50","migrationVersion":{"visualization":"7.10.0"},"references":[],"type":"visualization","updated_at":"2024-07-09T21:21:23.913Z","version":"WzI4LDJd"}
{"attributes":{"description":"OpenTelemetry Getting Started instructions for running locally the OpenTelemetry-Demo web-store application and ingesting the telemetry into opensearch","hits":0,"kibanaSavedObjectMeta":{"searchSourceJSON":"{\"query\":{\"language\":\"kuery\",\"query\":\"\"},\"filter\":[]}"},"optionsJSON":"{\"hidePanelTitles\":false,\"useMargins\":true}","panelsJSON":"[{\"embeddableConfig\":{},\"gridData\":{\"h\":15,\"i\":\"84a70083-a551-4b97-b996-8f9e935f2bd9\",\"w\":24,\"x\":0,\"y\":0},\"panelIndex\":\"84a70083-a551-4b97-b996-8f9e935f2bd9\",\"version\":\"2.15.0\",\"panelRefName\":\"panel_0\"}]","timeRestore":false,"title":"Otel-Demo-Getting-Started","version":1},"id":"43670390-3e38-11ef-a07c-d3f2df91ca50","migrationVersion":{"dashboard":"7.9.3"},"references":[{"id":"1afe2a50-3e38-11ef-a07c-d3f2df91ca50","name":"panel_0","type":"visualization"}],"type":"dashboard","updated_at":"2024-07-09T21:21:28.208Z","version":"WzI5LDJd"}
{"exportedCount":2,"missingRefCount":0,"missingReferences":[]}